server:
  port: 8080


spring:
  application:
    name: PRODUCT-SERVICE

  datasource:
    url: jdbc:mysql://localhost:3306/microservice
    username: root
    password: 12345
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  #redis config
  data:
    redis:
      host: localhost
      port: 6379
  cache:
    type: redis

# swagger-ui configç
springdoc:
  swagger-ui:
    path: /swagger-ui.html  #default path.


  config:
    import: optional:configserver:http://localhost:8084

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9000/realms/spring-microservice


management:
  health:
    circuitbreakers: #Bu ayar, uygulamanızın sağlık durumu (health) izleme ve raporlama özelliğini konfigüre eder.
      enabled: true
  #Bu ayar, Actuator tarafından sunulan HTTP endpoint'lerini (veya yönlendiricilerini) hangi durumda açacağını belirtir. Özellikle web altındaki exposure bölümü, bu endpoint'lerin hangi koşullarda dış dünyaya (HTTP istemcilerine) açılacağını tanımlar.
  endpoints:
    web:
      exposure:
        include: health  # Yani, /actuator/health endpoint'i HTTP isteklerine cevap verecektir.
  #Bu ayar, uygulamanızın sağlık (health) endpoint'inin sağladığı raporlarda detaylı bilgilerin gösterilip gösterilmeyeceğini belirtir. Özellikle health altındaki show-details parametresi, bu endpoint'in ne kadar ayrıntılı bilgi sunacağını kontrol eder.
  endpoint:
    health:
      show-details: always # : Sağlık endpoint'inin sağladığı raporlarda detaylı bilgilerin gösterilip gösterilmeyeceğini belirtir.
  tracing: #zipkin config
    sampling:
      probability: 1.0  #her isteği takip edecek



resilience4j:
  circuitbreaker:
    instances:
      inventoryServiceBreaker: #inventoryServiceBreaker adlı bir Circuit Breaker örneği için spesifik konfigürasyonları tanımlar.
        registerHealthIndicator: true  # Circuit Breaker'ın sağlık durumu bilgisinin Actuator'a kayıt edilmesini sağlar.
        eventConsumerBufferSize: 10   # 10 değeri, olay tüketicisi için tampon boyutunu belirtir. Bu, Circuit Breaker olaylarının kaç tanesinin tamponda tutulacağını belirler.
        failureRateThreshold: 50      # Hata oranı eşiğini belirler.Circuit Breaker'ın devreye girmesi için gereken hata oranı eşiğidir (%50).
        minimumNumberOfCalls: 5       # Circuit Breaker'ın aktif hale gelmesi için gereken minimum çağrı sayısını belirler.
        automatic-transition-from-open-to-half-open-enabled: true # Circuit Breaker'ın otomatik olarak açık durumdan yarı açık duruma geçiş yapıp yapmayacağını belirler.
        waitDurationInOpenState: 6s              # Circuit Breaker'ın açık durumda ne kadar süre kalacağını belirler.
        permittedNumberOfCallsInHalfOpenState: 3 # : Yarı açık durumda izin verilen çağrı sayısını belirler.
        slidingWindowSize: 10                    # Kayar pencere boyutunu ayarlar.Circuit Breaker, hata oranını hesaplamak için bu pencere içindeki çağrıları kullanır.
        slidingWindowType: COUNT_BASED           # Kayar pencere tipini belirler.


  retry: #  retry (yeniden deneme) mekanizması
    instances:
      inventoryServiceBreaker:
        max-attempts: 3     # kaç kez yeniden deneneceğini belirtir.
        wait-duration: 5s   # iki deneme arasındaki bekleme süresini belirtir.


  ratelimiter: #  rate limiter (oran sınırlayıcı) kullanarak belirli bir süre içinde belirli sayıda istek kabul edebilirsiniz
    instances:
      createProductLimiter:
        limit-refresh-period: 4s    # limitin ne sıklıkla yenileneceğini belirtir.
        limit-for-period: 2         #her dönem için izin verilen maksimum çağrı sayısını belirtir.
        timeout-duration: 0s        # rate limiter'a ulaşılabilir olmayı beklemek için ne kadar süre bekleyeceğini belirtir



  #eureka:
#  instance:
#    prefer-ip-address: true

#  client:
#    register-with-eureka: true
#    fetch-registry: true
#    service-url:
#      defaultZone : http://localhost:8761/eureka

